{"remainingRequest":"/Users/Tal/Desktop/onlinebook/vuepress-starter/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/Tal/Desktop/onlinebook/vuepress-starter/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/Tal/Desktop/onlinebook/vuepress-starter/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/Tal/Desktop/onlinebook/vuepress-starter/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/Tal/Desktop/onlinebook/vuepress-starter/docs/plots/02-plots-homefield.md?vue&type=template&id=0fc51c55&","dependencies":[{"path":"/Users/Tal/Desktop/onlinebook/vuepress-starter/docs/plots/02-plots-homefield.md","mtime":1611002973881},{"path":"/Users/Tal/Desktop/onlinebook/vuepress-starter/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Tal/Desktop/onlinebook/vuepress-starter/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/Tal/Desktop/onlinebook/vuepress-starter/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Tal/Desktop/onlinebook/vuepress-starter/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/Tal/Desktop/onlinebook/vuepress-starter/node_modules/@vuepress/markdown-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKCJoMSIsIHsgYXR0cnM6IHsgaWQ6ICJob21lLWZpZWxkLWFkdmFudGFnZSIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjaG9tZS1maWVsZC1hZHZhbnRhZ2UiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBIb21lLWZpZWxkIEFkdmFudGFnZSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkFzIGRpc2N1c3NlZCBhYm92ZSwgd2UgZmlyc3QgdHJpZWQgc2NhdHRlciBwbG90IHdpdGggaml0dGVyLiBUaGUgeC1heGlzIGlzIHRoZSBjb3VudHJpZXMgdGhhdCBoYXZlIGV2ZXIgaG9zdGVkIHRoZSBPbHltcGljcyBhbmQgdGhlIHktYXhpcyBkZW5vdGVzIHRoZSBwZXJjZW50YWdlIG9mIG1lZGFscyBlYXJuZWQgYnkgYSBjb3VudHJ5IGFnYWluc3QgdGhlIHRvdGFsIG51bWJlciBvZiBtZWRhbHMgaW4gdGhhdCB5ZWFyLiBCbHVlIGRvdHMgcmVwcmVzZW50IGRhdGEgd2hlbiB0aGUgY291bnRyeSB3YXMgbm90IHRoZSBob3N0IGFuZCB0aGUgb3JhbmdlIG9uZXMgZm9yIHdoZW4gaXQgd2FzIHRoZSBob3N0LiBTZWUgRmlndXJlIDMwLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImZpZ3VyZSIsIFsKICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgc3JjOgogICAgICAgICAgICAgICJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vaG9uZ3Rhb2gvb2x5bXZpcy1kYXRhL21hc3Rlci9vdXRwdXQvdmlzL2ctMi03LnBuZyIKICAgICAgICAgIH0KICAgICAgICB9KSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygiZmlnY2FwdGlvbiIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIlxuICBcdEZpZ3VyZTMwOiBTY2F0dGVyIHBsb3Qgd2l0aCBqaXR0ZXJpbmcgZm9yIGhvbWUtZmllbGQgYWR2YW50YWdlXG4gICIKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUaGUgYmx1ZSBkb3RzIHdlcmUgdG9vIHBhY2tlZC4gV2UgbGF0ZXIgdHJpZWQgYmVlc3dhcm0gcGxvdCBjb3VwbGVkIHdpdGggYm94IHBsb3QuIERvdHMgd2VyZSBzaG93biBtdWNoIG1vcmUgY2xlYXJseSBidXQgb25lIGRyYXdiYWNrIGlzIHRoYXQgd2UgY291bGQgbm90IHNlZSB0aGUgZGVuc2l0eSBkaXN0cmlidXRpb24gb2YgYWxsIHRoZSBkb3RzIHZlcnkgd2VsbC4gRGVuc2l0eSBkaXN0cmlidXRpb24gd2FzIGltcG9ydGFudCBpbiB0aGlzIGNhc2UgYmVjYXVzZSBpdCB3b3VsZCBhbGxvdyBhbiBlYXNpZXIgY29tcGFyaXNvbiBiZXR3ZWVuIHRoZSBtZWRhbCBwZXJjZW50YWdlIHdoZW4gYSBjb3VudHJ5IHdhcyBhIGhvc3QgYW5kIHRoYXQgd2hlbiBpdCB3YXMgbm90LiBTZWUgRmlndXJlIDMxLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImZpZ3VyZSIsIFsKICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgc3JjOgogICAgICAgICAgICAgICJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vaG9uZ3Rhb2gvb2x5bXZpcy1kYXRhL21hc3Rlci9vdXRwdXQvdmlzL2ctMi04LnBuZyIKICAgICAgICAgIH0KICAgICAgICB9KSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygiZmlnY2FwdGlvbiIsIFsKICAgICAgICAgIF92bS5fdigiXG4gIFx0RmlndXJlIDMxOiBCZWVzd2FybSBwbG90IGZvciBob21lLWZpZWxkIGFkdmFudGFnZVxuICAiKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRvIHNob3cgZGVuc2l0eSBkaXN0cmlidXRpb24gb2YgbWVkYWwgcGVyY2VudGFnZXMsIHdlIHVzZWQga2VybmVsIGRlbnNpdHkgZXN0aW1hdGlvbiBpbiBhIHNtYWxsIG11bHRpcGxlLiBUaGUgeC1heGlzIGlzIHRoZSBtZWRhbCBwZXJjZW50YWdlIGFuZCB0aGUgeS1heGlzIGlzIHRoZSBwcm9iYWJpbGl0eSBkZW5zaXR5LiBXZSB1c2VkIGEgcmVkIGFycm93IHRvIGRlbm90ZSB3aGVuIHRoZSBjb3VudHJ5IHdhcyBhbiBPbHltcGljcyBob3N0LiBBbiBhcnJvdyBsb2NhdGVkIGF0IHRoZSB0YWlsIHdvdWxkIGluZGljYXRlIHRoZSBleGlzdGVuY2Ugb2YgaG9tZS1maWVsZCBhZHZhbnRhZ2UuIFNlZSBGaWd1cmUgMzIuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZmlndXJlIiwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9ob25ndGFvaC9vbHltdmlzL21hc3Rlci9zdGF0aWMvcGljcy9nLTItOS5wbmciCiAgICAgICAgICB9CiAgICAgICAgfSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImZpZ2NhcHRpb24iLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJcbiAgXHRGaWd1cmUgMzI6IEtERSBpbiBzbWFsbCBtdWx0aXBsZSBmb3IgaG9tZS1maWVsZCBhZHZhbnRhZ2VcbiAgIgogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0pCiAgICBdCiAgKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}