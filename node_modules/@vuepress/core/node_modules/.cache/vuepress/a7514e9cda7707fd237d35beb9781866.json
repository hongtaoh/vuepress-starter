{"remainingRequest":"/Users/Tal/Desktop/onlinebook/vuepress-starter/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/Tal/Desktop/onlinebook/vuepress-starter/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/Tal/Desktop/onlinebook/vuepress-starter/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/Tal/Desktop/onlinebook/vuepress-starter/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/Tal/Desktop/onlinebook/vuepress-starter/docs/03-lit/efficiency.md?vue&type=template&id=c97a56d0&","dependencies":[{"path":"/Users/Tal/Desktop/onlinebook/vuepress-starter/docs/03-lit/efficiency.md","mtime":1611002484199},{"path":"/Users/Tal/Desktop/onlinebook/vuepress-starter/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Tal/Desktop/onlinebook/vuepress-starter/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/Tal/Desktop/onlinebook/vuepress-starter/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Tal/Desktop/onlinebook/vuepress-starter/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/Tal/Desktop/onlinebook/vuepress-starter/node_modules/@vuepress/markdown-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}